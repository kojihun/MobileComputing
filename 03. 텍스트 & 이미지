*텍스트 활용
 -텍스트 출력의 원리
 -텍스트는 정해진 레이아웃에 따라 출력됨
 
<레이아웃 유형>
*안드로이드 화면 배치
 -안드로이드는 기본 레이아웃과 어댑터를 이용한 레이아웃을 제공
  -기본 레이아웃: 리니어 레이아웃(수평 또는 수직 방향의 화면 배치), 렐러티브 레이아웃(개체들 간의 상대적인 위치에 의한 배치), 웹뷰(웹 문서의 출력)
  -어댑터 레이아웃: 리스트 뷰, 그리드 뷰
  -컨스트레인트 레이아웃
 -각 레이아웃마다 쓰임새가 다르기 때문에 개발할 앱의 특성에 맞는 레이아웃을 이용
 
*어댑터 레이아웃
 -어댑터: 레이아웃과 그 레이아웃에 출력될 데이터를 바인딩하는 클래스
 -리스트뷰: 단일 열의 목록 출력
 -그리드뷰: 정해진 수의 열과 행으로 구성되는 격자 모양의 출력
 
*컨스트레인트 레이아웃
 -리니어 레이아웃과 렐러티브 레이아웃의 단점들을 보완한건
 -안드로이드 스튜디오에서 프로젝트를 생성하면 자동으로 만들어짐
 
*리니어 레이아웃
 -레이아웃 내에 여러 뷰들을 수직 또는 수평으로 배치할때 사용
 -vertical과 horizontal로 레이아웃을 지정할 수 있음
 
*클래스
 -LinearLayout: 열 또는 행 단위로 포함된 뷰들을 배치
 -TextView: 텍스트를 출력
 -View: UI컴포넌트들을 위한 기본적인 구현 영역
 -ViewGroup.LayoutParams: 뷰 클래스를 다목 레이아웃 특성을 정의하며 눈에는 보이지 않는 컨테이너인 레이아웃의 기반이 되는 ViewGroup 클래스의 내부에 정의되어 있는 클래스로 뷰들의 너비와 높이를 기술

*메소드
 -LinearLayout: 화면 레이아웃의 방향을 의미하며, 행에 대해서 Vertical, 열에 대해서 Horizontal을 지정
 -TextView: 문자가 정해진 범위를 벗어날 때 문장이 잘리는 것 대신에 효과를 줌
 -gravity: 뷰 내의 콘텐츠의 위치
 -singleLine: true 또는 false의 값을 가지며 true인 경우 문장을 여러 줄에 표시하지 않고 한 줄에 스크롤 되게 표시
 -text: TextView가 출력하는 문자를 의미, 속성값을 문자열을 하드 코딩하거나, String 리소스를 정의하여 사용할 수 있음
 -textColor: 화면에 출력될 텍스트의 색을 의미
 -textSize: 화면에 출력될 텍스트의 크기를 의미
 -textStyle: 문자의 스타일을 지정함, '|'을 사용하여 여러 값을 설정할 수 있음
 -background: 배경색, 배경이미지, xml파일을 설정
 -paddingBottom: 가장자리 아래 부분의 패딩(단위는 픽셀)
 -layout_height: 뷰의 높이를 의미
 -layout_width: 뷰의 너비를 의미
 
*화면 출력 방법
 -XML문서에 뷰들을 배치한 후 액티비티 자바 클래스에서 불러 출력하는 방법
  -정적인 화면 구성을 쉽게 표현 가능
  -XML문서에서 사용한 엘리먼트 이름은 자바 클래스 속성명과 같음
  -속성들의 값은 자바 클래스의 메소드에서 수정 가능
 -액티비티 자바 클래스에서 동적으로 뷰 객체를 생성하여 출력하는 방법
